var express = require('express'),
ejs = require('ejs'),
path = require('path'),
bodyParser = require('body-parser'),
fileUpload = require('express-fileupload'),
 url = 'mongodb://halpingHands:HalpingIsGood@13.235.148.218:53584/helpinghands';
// url = "mongodb://localhost:27017",
dbName = 'helpinghands',
// dbName="money";
MongoClient = require('mongodb').MongoClient,
objectId = require('mongodb').ObjectID,
// session = require('express-session'),
assets = require('assert'),
http = require('http'),
uniqid = require('randomatic'),
app = express(),
helmet = require('helmet'),
verson = 'v1',
port = '3000';


// var sess='';

// var BaseUrl = "http://3.6.102.34:"+port;
var BaseUrl = "http://13.235.148.218:"+port+"/v1";
// console.log(BaseUrl)

app.engine('html', ejs.renderFile);
app.set('view engine', 'ejs');

//path of website........
//app.use(express.static('views'));

//app.use(express.static(path.join(__dirname, 'views')));

app.use(helmet());

app.use(fileUpload());

app.use(bodyParser.urlencoded({extended: true}))
app.use(bodyParser.json())

var multer  = require('multer')
var upload = multer()

var server = app.listen(port, () => {
  console.log("We Are Live On " + port)
})

app.use(function (req, res, next) {
  res.setHeader('Access-Control-Allow-Origin', "*");
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
  res.setHeader('Access-Control-Allow-Credentials', true);
  next();
});

// app.use(session({
//   secret: 'fsd84h507JKNJ9hg8&jndas*(jnjzcz',
//   resave: true,
//   saveUninitialized: true
// }));

MongoClient.connect(url, { useUnifiedTopology: true }, function (err, client) {
  assets.equal(null, err);
  if (err) throw err;
  const db = client.db(dbName);
  console.log("mongodb is connected with database =", dbName)

  function responseData(file, data, res) {  
    data['BaseUrl'] = BaseUrl;
        // data['active'] = typeof sess.active != 'undefined' ? sess.active : 'dashboard';
        res.render(file, data);
      }


      app.post('/'+verson+'/login', (req, res) => {
        sess = req.session;

        var data = req.body;
        var Mobile_no = data.Mobile_no;
        var password = data.password;

        var errortrue = {
      User_id: 0,
      name: 0,
      Mobile_no: 0,
      city: 0,
      my_referid: 0,
      date: 0
    }

          if (Mobile_no && password) {
          db.collection('register').findOne({Mobile_no: Mobile_no, password: password}, (err, result) => {

            if (err) {
              console.log(err);
            }

            if (result) {

              if(result.block == 0){

              var datas = {
                User_id : result._id,
                name: result.name,
                Mobile_no: result.Mobile_no,
                city : result.city,
                my_referid: result.my_referid,
                date : result.date
              }

             // sess.Mobile_no = req.body.Mobile_no;
             // console.log(sess.);
              res.send({error: false, data: datas});

              }else{
                 res.send({ data: 'You Are Not Authorised To Login Because Your Account Is Blocked.', error: true });
              }

            } else {
              res.send({ data: errortrue, error: true });
            }

          })
        } else {
          res.send({ data: errortrue,error: true });
        }
      })


      app.post('/'+verson+'/Forgot', (req, res) => {
        var data = req.body;

        if (!objectId.isValid(data.User_id)) {
          return res.send({error: true, data: 'UserId Not Valid'})
        }

        var query = {
          _id: objectId(data.User_id)
        }

        var updatedata = {
          Mobile_no: data.Mobile_no,
          _id: objectId(data.User_id),
          password: data.new_pass
        }

        db.collection('register').findOne(query, (err, findid) => {
          if(findid){
            if(findid.Mobile_no == data.Mobile_no){
              db.collection('register').updateOne(query, {$set : updatedata}, (err, result) => {
                res.send({error: false})
              })
            }else{
              res.send({error: true, data: 'Mobile Number Not Available'})
            }
          }else{
            res.send({error: true, data: 'UserId Not Available'})
          }
        })
      })


/*      app.post('/'+verson+'/register', (req, res) => {
        var data = req.body;
        var register = {
          name: data.name,
          sender_referid: data.sender_referid,
          Mobile_no: data.Mobile_no,
          password: data.password,
          city: data.city,
          my_referid: uniqid('A0',8),
          block: 0,
          date: new Date()
        }

        db.collection('register').findOne({Mobile_no: data.Mobile_no}, (err, result)=> {
          if(result){
            res.send({error: true, data: 'mobile already exist'})
          }else{
            db.collection('register').insertOne(register, (errs, response) => {
              if(errs){
                return res.send({error: true, data: 'Database Error'});
              }
              res.send({error: false, name: data.name, Mobile_no: data.Mobile_no, city: data.city, my_referid: data.my_referid})
            })
          }
        })
      })*/












      app.post('/'+verson+'/register', (req, res) => {
        var data = req.body;
        
        if(data.sender_referid != ''){
         if(data.name != '' && data.Mobile_no != '' && data.password != '' && data.city != ''){
          db.collection('register').countDocuments({my_referid: data.sender_referid}, (err, result1) => {
            console.log(result1)
            if(result1 == 0){
              return res.send({error: true, data: 'referal code not match'})
            }else{
          var register = {
            name: data.name,
            sender_referid: data.sender_referid,
            Mobile_no: data.Mobile_no,
            password: data.password,
            city: data.city,
            my_referid: uniqid('A0',8),
            block: 0,
            walletBalance: 0,
            date: new Date()
          }
  
          db.collection('register').findOne({Mobile_no: data.Mobile_no}, (err, result)=> {
            if(result){
              res.send({error: true, data: 'mobile already exist'})
            }else{
              db.collection('register').insertOne(register, (errs, response) => {
                if(errs){
                  return res.send({error: true, data: 'Database Error'});
                }
                res.send({error: false, name: data.name, Mobile_no: data.Mobile_no, city: data.city, my_referid: data.my_referid})
              })
            }
          })
        }
        }) 
        }else{
          return res.send({error: true, data: 'Please Insert All detail'})
        }
        }else{
          if(data.name != '' && data.Mobile_no != '' && data.password != '' && data.city != ''){
          var register = {
            name: data.name,
            sender_referid: data.sender_referid,
            Mobile_no: data.Mobile_no,
            password: data.password,
            city: data.city,
            my_referid: uniqid('A0',8),
            block: 0,
            date: new Date()
          }
  
          db.collection('register').findOne({Mobile_no: data.Mobile_no}, (err, result)=> {
            if(result){
              res.send({error: true, data: 'mobile already exist'})
            }else{
              db.collection('register').insertOne(register, (errs, response) => {
                if(errs){
                  return res.send({error: true, data: 'Database Error'});
                }
                res.send({error: false, name: data.name, Mobile_no: data.Mobile_no, city: data.city, my_referid: data.my_referid})
              })
            }
          })
          }else{
          return res.send({error: true, data: 'Please Insert All detail'})
        }
        }

      })










      app.post('/'+verson+'/User_Dashboard',upload.any(), (req, res) => {

        var data= req.body;

        if (!objectId.isValid(data.User_id)) {
          return res.send({error: true, data: 'inValid UserId'})
        } 

        db.collection('register').findOne({_id: objectId(data.User_id)}, (err1, validuser) => {

         if(validuser != undefined || validuser != null){
           console.log(data.User_id)


                  db.collection('ph_link').countDocuments({ User_ID: data.User_id }, (err2, ph_link) => { //not working
                    db.collection('rh_link').countDocuments({ User_ID: data.User_id }, (err3, rh_link) => { //not working
                      db.collection('register').countDocuments({ sender_referid: validuser.my_referid}, (err4, team) => {


                   db.collection('pinHistory').find({User_id: data.User_id}).toArray((err5, sumofamount) => {

                    var sum = 0;
                    for(var i = 0; i < sumofamount.length; i++){
                      sum += parseInt(sumofamount[i].pin_count);
                    }

                    var datass = {
                      User_ID: data.User_id,
                      name: validuser.name,
                      mobile_no: validuser.mobile_no,
                      User_total_pin: sum,
                      Total_ph: ph_link,
                      Total_rh: rh_link,
                      team: team,
                      Wallet_balance: validuser.walletBalance,
                      date: new Date()
                    }
                    
                    res.send({error: false, data: datass})

                  })          
                  })         
                 })

                 })

        } else {
          res.send({error: true, data: 'User Not Found'})
        }

      })

      })

































   /*   app.post('/'+verson+'/Pin_buy', (req, res) => {

        var data= req.body;

        if (!objectId.isValid(data.User_id)) {
          return res.send({error: true, data: 'inValid UserId'})
        } 

        db.collection('register').findOne({_id: objectId(data.User_id)}, (err1, validuser) => {

         if(validuser != undefined || validuser != null){

          db.collection('todaypin').findOne({visible: 0}, (err2, result) => {

            if(result != undefined || result != null){

                if(!(data.pin_count > result.available_pin)){ // less then or equal to not working

                  var insert = {
                    User_id: data.User_id,
                    amount: parseInt(data.amount),
                    pin_count: parseInt(data.pin_count),
                    Tr_id: uniqid('Aa0',12),
                    date: new Date()
                  }

                  db.collection('pinHistory').insertOne(insert, (err3, pinHistory) => {
                    db.collection('todaypin').updateOne({visible: 0}, {$inc : { available_pin: -data.pin_count }}, (err3, available_pin) => {
                      db.collection('todaypin').updateOne({visible: 0}, {$inc : { sold_pin: +data.pin_count }}, (err3, sold_pin) => {
                        db.collection('pinHistory').find({User_id: data.User_id}).toArray((err5, sumofamount) => {

                          var sum = 0;
                          for(var i = 0; i < sumofamount.length; i++){
                            sum += parseInt(sumofamount[i].pin_count);
                          }

                          var datass = {
                            total_pin: sum,
                            sold_pin: 0,
                            available_pin: 0,
                            date: new Date()
                          }
                          
                          res.send({error: false, data: datass})

                        })      
                      })
                    })             
                 })

                }else{
                  res.send({error: true, data: 'available pin only is'})
                }

              }else{
                res.send({error: true, data: 'Pin Not Available'})
              }
            })

        } else {
          res.send({error: true, data: 'User Not Found'})
        }

      })

      }) */




  app.post('/' + verson + '/Pin_buy', (req, res) => {

    var data = req.body;

    if (!objectId.isValid(data.User_id)) {
      return res.send({ error: true, data: 'inValid UserId' })
    }

    db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {

      if (validuser != undefined || validuser != null) {

        db.collection('todaypin').findOne({ visible: 0 }, (err2, result) => {

          if (result != undefined || result != null) {

            if (!(data.pin_count > result.available_pin)) { // less then or equal to not working
              if (!(data.amount > validuser.walletBalance)) {

                var insert = {
                  User_id: data.User_id,
                  amount: parseInt(data.amount),
                  pin_count: parseInt(data.pin_count),
                  Tr_id: uniqid('Aa0', 12),
                  date: new Date()
                }

                db.collection('pinHistory').insertOne(insert, (err3, pinHistory) => {
                  db.collection('todaypin').updateOne({ visible: 0 }, { $inc: { available_pin: -data.pin_count, sold_pin: +data.pin_count } }, (err4, available_pin) => {
                    db.collection('pinHistory').find({ User_id: data.User_id }).toArray((err6, sumofamount) => {
                      db.collection('register').updateOne({ _id: objectId(data.User_id) }, { $inc: { walletBalance: -data.amount } }, (err7, mycall) => {
                        db.collection('register').findOne({ _id: objectId(data.User_id) }, (err8, latestamount) => {
                         db.collection('todaypin').findOne({visible: 0}, (err9, mypin) => {

                            var sum = 0;
                            for (var i = 0; i < sumofamount.length; i++) {
                              sum += parseInt(sumofamount[i].pin_count);
                            }

                            var datass = {
                              user_total_pin: sum,
                              total_pin: mypin.total_pin,
                              sold_pin: mypin.sold_pin,
                              available_pin: mypin.available_pin,
                              walletBalance: latestamount.walletBalance,
                              date: new Date()
                            }

                            res.send({ error: false, data: datass })
                          })
                       
                        })
                      })
                    })
                  })
                })
              } else {
                res.send({ error: true, data: 'insufficient balance' })
              }

            } else {
              res.send({ error: true, data: 'available pin only is' })
            }

          } else {
            res.send({ error: true, data: 'Pin Not Available' })
          }
        })

      } else {
        res.send({ error: true, data: 'User Not Found' })
      }

    })
  })






     
/*
      app.post('/'+verson+'/confirm_amount', (req, res) => {

        var data = req.body;

        if (!objectId.isValid(data.User_id)) {
          return res.send({error: true, data: 'inValid UserId'})
        } 
        if (!objectId.isValid(data.Tr_user_id)) {
          return res.send({error: true, data: 'inValid ReceiverId'})
        } 

        db.collection('rh_link').findOne({Tr_id: data.TR_ID}, (err, result) => {
          
          if(result != undefined || result != null){

            if(result.use != 1){

              if(result.User_ID == data.User_id){

                db.collection('rh_link').updateOne({Tr_id: data.TR_ID}, {$set: {use: 1}}, (err1, updateuse) => {

                  //sending user wallet data static 
                  res.send({error: false, user_wallet: 0})

                })
           
              }else{
                res.send({error: true, data: 'UserId Not Available'})
              }

            }else{
              res.send({error: true, data: 'transection Already Done'})
            }

          }else{
            res.send({error: true, data: 'transection Id Not Available'})
          }

        })
      })*/



      app.post('/'+verson+'/confirm_amount', (req, res) => {

        var data = req.body;

        if (!objectId.isValid(data.User_id)) {
          return res.send({error: true, data: 'inValid UserId'})
        } 
        if (!objectId.isValid(data.Tr_user_id)) {
          return res.send({error: true, data: 'inValid ReceiverId'})
        } 

        db.collection('rh_link').findOne({Tr_id: data.TR_ID}, (err, result) => {
          
          if(result != undefined || result != null){

            if(result.use != 1){

              if (result.sender_id == data.Tr_user_id) {

                if (result.receiver_id == data.User_id) {
               
                  db.collection('rh_link').updateOne({Tr_id: data.TR_ID}, {$set: {use: 1}}, (err1, updateuse) => {
                    db.collection('register').updateOne({ _id: objectId(data.User_id) }, { $inc: { walletBalance: +parseInt(data.amount) } }, (err2, myrealamount) => {
                      db.collection('register').findOne({ _id: objectId(data.User_id) }, (err3, updatedamount) => {

                        res.send({ error: false, user_wallet: updatedamount.walletBalance })

                      })
                    })

                  })
                }else{
                  res.send({error: true, data: 'receiverId Not Available'})
                }
           
              }else{
                res.send({error: true, data: 'UserId Not Available'})
              }

            }else{
              res.send({error: true, data: 'transection Already Done'})
            }

          }else{
            res.send({error: true, data: 'transection Id Not Available'})
          }

        })
      })






















    /*  app.post('/'+verson+'/User_wallet_transfer', (req, res) => {

        var data = req.body;
        if (!objectId.isValid(data.User_id)) {
          return res.send({ error: true, data: 'inValid UserId' })
        }

        if (!objectId.isValid(data.receiver_id)) {
          return res.send({ error: true, data: 'inValid receiverId' })
        }

        db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {
          db.collection('register').findOne({ _id: objectId(data.receiver_id) }, (err1, receiver) => {

            
            if (validuser != undefined || validuser != null) {
              if (receiver != undefined || receiver != null) {

              var insertdata = {
                User_id: data.User_id,
                amount: parseInt(data.amount),
                receiver_id: data.receiver_id,
                Tr_id: uniqid('Aa0',12),
                date: new Date()
              }

              db.collection('walletTransfer').insertOne(insertdata, (err2, result) => {
                //send to wallet balance data static
                res.send({error: false, Wallet_balance: 0 })
              })

              }else{
                res.send({error: true, data: 'User Not Available'})
              }
            }else{
              res.send({error: true, data: 'Receiver Not Available'})
            }

          })
        })

      }) */


















  app.post('/' + verson + '/User_wallet_transfer', (req, res) => {

    var data = req.body;
    if (!objectId.isValid(data.User_id)) {
      return res.send({ error: true, data: 'inValid UserId' })
    }

    if (!objectId.isValid(data.receiver_id)) {
      return res.send({ error: true, data: 'inValid receiverId' })
    }

    db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {
      db.collection('register').findOne({ _id: objectId(data.receiver_id) }, (err1, receiver) => {


        if (validuser != undefined || validuser != null) {
          if (receiver != undefined || receiver != null) {
            if(!(parseInt(data.amount) > validuser.walletBalance)){


            var insertdata = {
              User_id: data.User_id,
              amount: parseInt(data.amount),
              receiver_id: data.receiver_id,
              Tr_id: uniqid('Aa0', 12),
              date: new Date()
            }

            db.collection('walletTransfer').insertOne(insertdata, (err2, result) => {
              db.collection('register').updateOne({_id: objectId(data.User_id)}, {$inc : {walletBalance: -parseInt(data.amount)}}, (err3, mybalancedown) => {
                db.collection('register').updateOne({_id: objectId(data.receiver_id)}, {$inc : {walletBalance: +parseInt(data.amount)}}, (err3, mybalanceup) => {
                  db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, mybalance) => {
                    res.send({ error: false, Wallet_balance: mybalance.walletBalance })
                  })
                })
              })
            })
          } else {
            res.send({ error: true, data: 'insufficient Balance' })
          }

          } else {
            res.send({ error: true, data: 'User Not Available' })
          }
        } else {
          res.send({ error: true, data: 'Receiver Not Available' })
        }

      })
    })

  })









      app.post('/'+verson+'/User_history', (req, res) => {

        var data = req.body;
        if (!objectId.isValid(data.User_id)) {
          return res.send({ error: true, data: 'inValid UserId' })
        }

        db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {

          if (validuser != undefined || validuser != null) {
              
            db.collection('ph_link').find({ User_ID: data.User_id }).toArray((err2, ph_link) => {
              db.collection('rh_link').find({ User_ID: data.User_id }).toArray((err3, rh_link) => {
                db.collection('pinHistory').find({User_id: data.User_id}).toArray((err4, pinHistory) => {
                  db.collection('walletTransfer').find({User_id: data.User_id}).toArray((err5, walletTransfer) => {

                    var data = {
                      User_id: validuser._id,
                      Total_ph: ph_link,
                      Total_rh: rh_link,
                      pinHistory: pinHistory,
                      moneyTransfer: walletTransfer
                    }

                    res.send({error: false, data: data})
                  })
                })
              })
            })

          }else{
            res.send({error: true, data: 'User Not Available'})
          }
        })
      })





 













     app.post('/'+verson+'/add_balance', (req, res) => {
      var data = req.body;
      if (!objectId.isValid(data.User_id)) {
        return res.send({ error: true, data: 'inValid UserId' })
      }

      db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {

        if (validuser != undefined || validuser != null) {

          var insert = {
            User_id: data.User_id,
            amount: data.amount,
            tr_id: uniqid('Aa0', 12),
            date: new Date()
          }

          db.collection('walletHistory').insertOne(insert, (err2, result) => {
            db.collection('register').findOneAndUpdate({_id: objectId(data.User_id)}, {$inc: {walletBalance: +parseInt(data.amount)}}, (err3, Incamount) => {
              db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, myamount) => {
              var mydata = {
                User_id: myamount._id,
                walletBalance: myamount.walletBalance
              }
              res.send({error: false,data: mydata})
            })
            })
          })

        } else {
          res.send({ error: true, data: 'User Not Available' })
        }
      })
    })






















    app.post('/'+verson+'/Wallet', (req, res) => {
      var data = req.body;
      if (!objectId.isValid(data.User_id)) {
        return res.send({ error: true, data: 'inValid UserId' })
      }

      db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {

        if (validuser != undefined || validuser != null) {

              var mydata = {
                User_id: validuser._id,
                walletBalance: validuser.walletBalance
              }
              res.send({error: false,data: mydata})

        } else {
          res.send({ error: true, data: 'User Not Available' })
        }
      })
    })




















  app.post('/' + verson + '/user_profile', (req, res) => {
    var data = req.body;
    if (!objectId.isValid(data.User_id)) {
      return res.send({ error: true, data: 'inValid UserId' })
    }

    db.collection('register').findOne({ _id: objectId(data.User_id) }, (err1, validuser) => {

      if (validuser != undefined || validuser != null) {

        if(validuser.sender_referid == null){
          sender_referid = '';
        }
        res.send({ error: false, data: validuser })

      } else {
        res.send({ error: true, data: 'User Not Available' })
      }
    })
  })










  app.get('/' + verson + '/todayPin', (req, res) => {
    db.collection('todaypin').findOne({ visible: 0 }, (err1, validuser) => {
        if(validuser == null) {
          validuser = {
           "_id": 0,
        "total_pin": 0,
        "sold_pin": 0,
        "starttime": 0,
        "endtime": 0,
        "available_pin": 0,
        "pin_amount": 0,
        "provider_amt": 0,
        "receiver_amt": 0,
        "visible": 0,
        "date": 0
        }
          res.send({error: true,mymili: 0, data: validuser })
        }else{
         var currentTime = new Date()
        currentTime.setUTCHours(currentTime.getHours()+5);
        currentTime.setUTCMinutes(currentTime.getMinutes()+30);

        var end = validuser.endtime;

        var milisec = (end - currentTime)

        console.log(milisec)
         res.send({ error: false,mymili: milisec, data: validuser })
       }
    })
  })



    })
